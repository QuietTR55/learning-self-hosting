version: "3.8"

services:
  db:
    image: postgres:16-alpine # Use a specific Alpine version for smaller size
    container_name: postgres_db
    restart: unless-stopped
    environment:
      # IMPORTANT: Change these for production!
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: appdb
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist data using a named volume
      # Mount the schema file to be executed on initial startup
      - ./backend/internal/database/schema.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432" # Expose port 5432 to host (optional, for debugging)
    networks:
      - app-network

  backend:
    container_name: go_backend
    build:
      context: ./backend # Path to the directory containing the backend Dockerfile
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - db # Wait for the db service container to start (doesn't guarantee DB is ready)
    environment:
      # Use the service name 'db' as the hostname
      # Ensure these credentials match the 'db' service environment
      POSTGRES_URL: "postgres://user:password@db:5432/appdb?sslmode=disable"
      # Add any other environment variables your backend needs (e.g., GIN_MODE=release)
      GIN_MODE: "debug" # Or "release"
      PORT: "8080" # Define the port the Go app listens on inside the container
    ports:
      - "8080:8080" # Map host port 8080 to container port 8080
    networks:
      - app-network

volumes:
  postgres_data: # Define the named volume for data persistence

networks:
  app-network: # Define the network for services to communicate
    driver: bridge
